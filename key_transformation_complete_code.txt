# ProVerif Model: key_transformation_complete.pv
# Generated on: Sat Apr 26 15:32:17 EDT 2025
# ----------------------------------------

  1: (* Complete Key Transformation Protocol Model *)
  2: free c: channel.
  3: 
  4: (* Types *)
  5: type key.
  6: type nonce.
  7: 
  8: (* Secret keys and data *)
  9: free K: key [private].
 10: free authKey: key [private]. (* Shared authentication key *)
 11: free secretData: bitstring [private]. (* Secret message to protect *)
 12: 
 13: (* Cryptographic primitives *)
 14: fun F(key): key.
 15: fun senc(bitstring, key): bitstring.
 16: reduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.
 17: 
 18: (* Function to convert key to bitstring for MAC calculation *)
 19: fun key2bit(key): bitstring.
 20: fun mac(bitstring, key): bitstring.
 21: fun deriveKey(key): key.
 22: 
 23: (* Events for protocol execution tracking *)
 24: event AliceTransformsKey(key, key).
 25: event BobReceivesKey(key).
 26: event SessionKeyCreated(key).
 27: event SecureCommsEstablished(key).
 28: 
 29: (* Security queries - ALL QUERIES MUST BE AT TOP LEVEL *)
 30: query attacker(K). (* Original key remains secret *)
 31: query attacker(secretData). (* Secret data remains confidential *)
 32: query x: key; event(BobReceivesKey(x)) ==> event(AliceTransformsKey(K, x)). (* Authentication *)
 33: query k: key; event(SecureCommsEstablished(k)) ==> event(SessionKeyCreated(k)). (* Session key correspondence *)
 34: 
 35: (* Alice process *)
 36: let alice =
 37:     (* Alice applies transformation F to original key K *)
 38:     let K_prime = F(K) in
 39:     event AliceTransformsKey(K, K_prime);
 40:     
 41:     (* Alice authenticates the transformed key *)
 42:     let auth_tag = mac(key2bit(K_prime), authKey) in
 43:     out(c, (K_prime, auth_tag));
 44:     
 45:     (* Alice derives a session key and starts secure communication *)
 46:     let sessionKey = deriveKey(K_prime) in
 47:     event SessionKeyCreated(sessionKey);
 48:     
 49:     (* Alice sends an encrypted message using the session key *)
 50:     out(c, senc(secretData, sessionKey)).
 51: 
 52: (* Bob process *)
 53: let bob =
 54:     (* Bob receives the transformed key and authentication tag *)
 55:     in(c, (k_received: key, tag: bitstring));
 56:     
 57:     (* Bob verifies the authentication tag *)
 58:     if tag = mac(key2bit(k_received), authKey) then (
 59:         event BobReceivesKey(k_received);
 60:         
 61:         (* Bob derives the same session key *)
 62:         let sessionKey = deriveKey(k_received) in
 63:         
 64:         (* Bob receives and decrypts the message *)
 65:         in(c, encrypted_msg: bitstring);
 66:         let msg = sdec(encrypted_msg, sessionKey) in
 67:         event SecureCommsEstablished(sessionKey)
 68:     ).
 69: 
 70: (* Main process: Alice and Bob execute in parallel *)
 71: process
 72:     alice | bob

# ----------------------------------------
# Summary:
# - Total lines: 72
# - Type declarations: 2
# - Function declarations: 5
# - Events: 8
# - Processes: 7
